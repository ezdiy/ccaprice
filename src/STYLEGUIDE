As with any project there are some regulations in regards to how one should
write their code; these rules are formatting rules, and usage rules. These
rules are documented below for referential reasons.

1       Intentation:

1.1     Tabbing:
            Ccaprice and it's sister libraries use a 4-space tab for indentation.
            Tabulators or any other form of indentation is simply not allowed.
            Mixing tabulators and spacing often leads to ugly code in other editors
            that isn't yours.
            
1.3     Spacing:
            Ccaprice uses spaces liberally because white-space often tricks
            the eye into making the assumption the code is rather large and
            complex.  The only instances where spaces are allowed are within
            if expressions, conditionals, and constructs where parentheses
            are used.  Spaces are also always used before the opening of
            a curly brace.
            
            Example:
                if (1)           -- fine
                if(1)            -- not fine
                while (1)        -- fine
                while(1)         -- not fine
                do { } while (0) -- fine
                do { } while(0)  -- not fine
                do { } ...       -- fine
                do{ }  ...       -- not fine
                x = (y) ? -1 : 2 -- fine
                x=(y)?-1:2       -- not fine
                x=(y) ? -1 : 2   -- fine
                x = (y)?-2:2     -- not fine
                
                
            
1.3     Blocking:
            Ccapruce uses a K&R variant called "the one true brace style"
            (abbreviated as 1TBS or OTBS).  The source code of the Unix
            kernel was writte in this style, as is the Linux kernel. In
            this style, the constructs that allow insertions of new code
            lines are on seperate lines, and constructs that prohibit
            insertions are on a single line.  This princible is amplified
            by bracing every if, else, while, etc so that insertions of
            code anywhere is safe.  CCaprice while being slightly more
            liberal will allow single-line conditionals, noted that this
            isn't usually the case with 1TBS.
            
            Example:
                int foo(int bar) {
                    if (bar < 0) {
                        return foo(-1);
                    } else {
                        if (bar == -1) {
                            return ~bar;
                        } else {
                            foo(bar - 1);
                        }
                    }
                    return foo(-1);
                }
            
1.3     Macro Scoping:
            Ccaprice uses a quasi-known form of indentation in regards to
            preprocessor directives scoped within preprocessor branch
            directives.  These must always be used.  Note the tab indentation
            takes place after the preprocessor '#' token, not before.  The
            latter method of using indentation before the preprocessor token
            isn't allowed.  Note it's rather expected for large branching or
            conditionals within the preprocessor macro the fully expressed for
            should rather be used.
            
            Example (allowed since banching small):
                #ifdef FOO
                #   define BAR 1
                #else
                #   ifdef BAZ
                #       define BAR 2
                #   else
                #       define BAR 3
                #   endif
                #endif
                
            Example (for larger branching use full express form):
                #if defined(MAGIC)
                #   if defined(BAZ)
                #       define FOO (BAZ - 1)
                #       define BAR (FOO + 1)
                #       define BAMN FOO + BAR
                #   elif defined(BAM)
                #       define FOO (BAM - 2)
                #       define BAR (FOO + 2 - (BAM - 1))
                #       define BAZ FOO + BAR
                #   else
                #       if defined(MARCO)
                #           define POLO FOO
                #       else
                #           define POLO BAR
                #       endif
                #       if (POLO >= BAZ)
                #           define YES
                #       elif (POLO >= BAM && POLO < BAZ)
                #           define NO
                #       else
                #           define MAYBE
                #       endif
                #   endif
                #endif
