The current supported features so far
note the functions or headers in here may not be complete
in terms of functionality (their bare minimum requirement)

legend:
    [LOCALE SUPPORT] == The code for the function supports custom locale,
                        or system locale; or BOTH.
                        
    [GPR]            == The code for the function is optimized by using 
                        general purpose registers to do vector math.
                        
    [naive]          == The code for the function is a naive implementation
                        which means it could be slow and should be improved
                        
    [SSE2]           == The code for the function is optimized for SSE2
                        ready systems.
                        
    [branchless]     == The code for the function is optimized for all 
                        systems; the optimization benefit arises from
                        the fact that the function uses no branches.
                        
    [OPT]            == The code for the function is optimized using a 
                        different method not in this legend.

assert.h:
    assert()
    
ctype.h:
    isalnum () [LOCALE SUPPORT]
    isalpha () [LOCALE SUPPORT]
    iscntrl () [LOCALE SUPPORT]
    isdigit () [LOCALE SUPPORT]
    isgraph () [LOCALE SUPPORT]
    islower () [LOCALE SUPPORT]
    isprint () [LOCALE SUPPORT]
    ispunct () [LOCALE SUPPORT]
    isspace () [LOCALE SUPPORT]
    isupper () [LOCALE SUPPORT]
    isxdigit() [LOCALE SUPPORT]
    tolower () [LOCALE SUPPORT]
    toupper () [LOCALE SUPPORT]
    
errno.h:
    errno
    
fenv.h:
    FE_INVALID
    FE_DIVBYZERO
    FE_OVERFLOW
    FE_UNDERFLOW
    FE_INEXACT
    FE_ALL_EXCEPT
    FE_TONEAREST
    FE_DOWNWARD 
    FE_UPWARD
    FE_TOWARDZERO
    FE_DFL_ENV
    
    feclearexcept  ()
    feraiseexcept  ()
    fegetexceptflag()
    fesetexceptflag()
    fetestexcept   ()
    fesetround     ()
    fegetround     ()
    fegetenv       ()
    feholdexcept   ()
    fesetenv       ()
    feupdateenv    ()
    
    typedef struct fenv_t
    typedef ?      fexcept_t

    
float.h:
    FLT_RADIX
    FLT_MIN
    FLT_MAX
    FLT_EPSILON
    FLT_MANT_DIG
    FLT_MIN_EXP
    FLT_MAX_EXP
    FLT_DIG
    FLT_MIN_10_EXP
    FLT_MAX_10_EXP
    DBL_MIN
    DBL_MAX
    DBL_EPSILON
    DBL_MANT_DIG
    DBL_MIN_EXP
    DBL_MAX_EXP
    DBL_DIG
    DBL_MIN_10_EXP
    DBL_MAX_10_EXP

iso646.h:
    and
    and_eq
    bitand
    bitor
    compl
    not
    or
    or_eq
    xor
    xor_eq
    
locale.h:
    struct lconv  [LOCALE SUPPORT]
        decimal_point;
        thousands_sep;
        grouping;
        int_curr_symbol;
        currency_symbol;
        mon_decimal_point;
        mon_thousands_sep;
        mon_grouping;
        positive_sign;
        negative_sign;
        int_fract_digits;
        fract_digits;
        p_cs_precedes;
        n_cs_precedes;
        p_sep_by_space;
        n_sep_by_space;
        p_sign_posn;
        n_sign_posn;
        
    setlocale () [LOCALE SUPPORT]
    localeconv() [LOCALE SUPPORT]
    
signal.h:
    raise()
    
stdarg.h:
    va_list
    va_start()
    va_end  ()
    va_arg  ()
    
stddef.h:
    ptrdiff_t
    size_t
    offsetof()
    NULL
    
stdio.h:
    FILE
    EOF
    stdout
    stdin
    fclose()
    feof  ()
    ferror()
    fflush()
    fopen ()
    fputc ()
    fputs ()
    fwrite()
    printf() [incompleted! only supports a few things]
    remove()
    
stdlib.h:
    EXIT_SUCCESS
    EXIT_FAILURE
    MIN    () [extension/branchless]
    MAX    () [extension/branchless]
    abort  ()
    abs    ()
    atoi   ()
    atol   ()
    atoll  ()
    bsearch()
    div    ()
    exit   ()
    getenv ()
    labs   ()
    ldiv   ()
    llabs  ()
    lldiv  ()
    malloc ()
    calloc ()
    realloc()
    free   ()
    puts   ()
    rand   () [SSE2/naive]
    qsort  () [OPT/native]
    srand  () [SSE2/naive]
    div_t
    ldiv_t
    lldiv_t
    
string.h:
    memchr  () [SSE2/naive]
    memcmp  ()
    memcpy  () [OPT/naive]
    memmove ()
    memset  ()
    strcat  ()
    strchr  ()
    strcmp  ()
    strcspn ()
    strdup  ()
    strerror()
    strlen  () [SSE2/GPR/naive]
    strncat ()
    strncmp ()
    strncpy ()
    strpbrk ()
    strspn  ()
    ststr   ()
    strtok  ()
    
limits.h
    CHAR_BIT
    SCHAR_MIN
    SCHAR_MAX
    UCHAR_MAX
    CHAR_MIN
    CHAR_MAX
    MB_LEN_MAX
    SHRT_MIN
    SHRT_MAX
    USHRT_MAX
    INT_MIN
    INT_MAX
    UINT_MAX
    LONG_MIN
    LONG_MAX
    ULONG_MAX
    
math.h:
    FP_ILOGB0
    FP_ILOGBNAN
    M_1_PI
    M_2_PI
    M_E
    M_EULER
    M_PI
    M_PI_2
    M_PI_4
    M_TAU  [EXTENSION]
    acos  ()
    acosf ()
    acosl ()
    atan  ()
    atanf ()
    atanl ()
    atan2 ()
    atan2f()
    ceil  ()
    ceilf ()
    ceill ()
    fabs  ()
    fabsf ()
    fabsl ()
    fmod  ()
    fmodf ()
    fmodl ()
    log   ()
    logf  ()
    logl  ()
    log10 ()
    log10f()
    log10l()
    sqrt  ()
    sqrtf ()
    sqrtl ()
    
setjmp.h:
    longjmp()
    setjmp ()
    jmp_buf
    
The current supported locales for ccaprice
    C      -- default C locale
    en_CA  -- English Canada
    en_US  -- English United States
    en_AU  -- English Australia

Extensions supported by ccaprice
#define __CCAPRICE_EXTENSIONS prior to using them
__CCAPRICE_BUILD_DATE -- returns a constant string literal of the build date of the library                     [expanded __DATE__]
__CCAPRICE_BUILD_TIME -- returns a constant string literal of the build time of the library                     [expanded __TIME__]
__CCAPRICE_BUILD_INFO -- returns a constant string literal of the info of the system used to compile ccaprice   [uname -a]
__CCAPRICE_BUILD_COMP -- returns a constant string literal (all in caps) of the compiler used to build ccaprice ["GCC", "CLANG", "PATHCC"]
__CCAPRICE_BUILD_HOST -- returns a constant string literal (all in caps) of the os used to build ccaprice       ["WIN", "LINUX", "BSD"]
